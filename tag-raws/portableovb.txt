{setserver:uses|{js:let uses = {getserver:uses|0};
console.log(uses+1);}}{setserver:milestone|{js:let uses = {getserver:uses};
console.log((Math.floor(uses/1000)+1)*1000);}}{choose:i woke up in a new buggati|🚡|https://cdn.discordapp.com/attachments/1124758334805909509/1375196703824543887/resized.gif?ex=6830cf3c&is=682f7dbc&hm=a1f92b91fa51597a2f6053c5fb1b3bcdcccd9c26303c56d5ba2468eca96521dd&|sprunki sprunki sprunki get funky funky funky|cuphead and his pal mugman|featuring posy|i would die for this video ngl|chicken. 💥|# ALL OUR FOOD KEEPS BLOWING U- 💥💥💥💥|⬇️ ts is so boring 🥱|goze|goose|🪿|🍳🍳🍳|im going to hit you with a frying pan|copyright infringement}
-# **#{getserver:uses}**
-# {js:let uses = {getserver:uses};
let milestone = {getserver:milestone};
console.log(milestone-uses);} left until {getserver:milestone}{set:output|{py:import random
import string

arg_string = {jsonify:{args}}
parsearr = []

for arg in arg_string.split(','):
    tempdict = []
    if '=' in arg:
        key, value = arg.split('=', 1)
        tempdict.append(key)
        tempdict.append(value)
    else:
        tempdict.append(arg)
    parsearr.append(tempdict)
def constrain(val, min_val, max_val):
    if val == None:
        return None
    if type(val)     == str:
        val     = float(val    )
    if type(min_val) == str:
        min_val = float(min_val)
    if type(max_val) == str:
        max_val = float(max_val)
    return min(max_val, max(min_val, val))

def keygen(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    random_string = ''.join(random.choice(characters) for i in range(length))
    return random_string

def str_int(n):
    return int(float(n))

def parse(val):
    if val[0] == "bgr":
        print("-vf colorchannelmixer=0:0:1:0:0:1:0:0:1:0:0:0:0:0:0:1 ",end="")
    elif val[0] == "invert":
        print("-vf negate ",end="")
    elif val[0] == "hflip":
        print("-vf hflip ",end="")
    elif val[0] == "vflip":
        print("-vf vflip ",end="")
    elif val[0] == "pitch":
        val[1] = constrain(val[1],0.01,100)
        print(f"-af 'rubberband=pitch=2^({val[1]}/12):formant=712923000',atrim=0.025 ",end="")
    elif val[0] == "earrape":
        val[1] = constrain(val[1],0,100) * 20
        print(f"-af volume={val[1]} ",end="")
    elif val[0] == "huehsv":
        print(f"-vf huesaturation={val[1]}:0.05:0.02:-100:100 ",end="")
    elif val[0] == "hue":
        print(f"-vf hue={val[1]} ",end="")
    elif val[0] == "huecycle" or val[0] == "huec":
        val[1] = constrain(val[1],5,50)
        print(f"-vf 'hue=(t*360)*{val[1]}' ",end="")
    elif val[0] == "deepfry" or val[0] == "df":
        val[1] = constrain(val[1],0,100)
        print("-vf hue=s="+str(val[1]/10),end=" ")
    elif val[0] == "contrast" or val[0] == "ct":
        val[1] = constrain(val[1],-1,100)
        print(f"-vf eq=contrast={val[1]} ",end="")
    elif val[0] == "transpose":
        val[1] = constrain(val[1],1,4)
        print(f"-vf transpose={val[1]} ",end="")
    elif val[0] == "rotate":
        print(f"-vf rotate='{val[1]}*(PI/180)' ",end="")
    elif val[0] == "reverse" or val[0] == "rev":
        print(f"-vf reverse -af areverse ",end="")
    elif val[0] == "vreverse" or val[0] == "vrev":
        print(f"-vf reverse ",end="")
    elif val[0] == "areverse" or val[0] == "arev":
        print(f"-af areverse ",end="")
    elif val[0] == "hmirror" or val[0] == "hm":

        if str_int(val[1]) >= 2:
            print(f"-vf hflip,'crop=iw/2:ih:0:0,split[left][tmp];[tmp]hflip[right];[left][right]hstack' ",end="")
        else:
            print("-vf 'crop=iw/2:ih:0:0,split[left][tmp];[tmp]hflip[right];[left][right]hstack' ")
    else:
        print("Effect does not exist. ",end="")

last = 0

for i, v in enumerate(parsearr):
    if i == 0:
        print("ffmpeg -loglevel error -i $FILE_1 ",end="")
        parse(v)
        print(f"{i}.ts",end="\n")
        last = i
    else:
        print("ffmpeg -loglevel error -i "+str(i-1)+".ts ",end="")
        parse(v)
        print(f"{i}.ts",end="\n")
        last = i
print(f"ffmpeg -i {last}.ts ./output/{unix}.mp4")}}{if:{indexof:Effect does not exist.|{get:output}}|!=|-1|then:{js:console.error("Effect does not exist.")}|else:{sh:load {video}
{js:console.log(`{get:output}`);}}}